curr_dir = f'/user_data/csimmon2/git_repos/ptoc'

import sys
sys.path.insert(0,curr_dir)
import matplotlib.pyplot as plt
import seaborn as sns

import numpy as np
import pandas as pd

import itertools
from nilearn import image, plotting, datasets
from nilearn.datasets import load_mni152_brain_mask, load_mni152_template
import nibabel as nib
import pdb
import os
import ptoc_params as params
#hide warning
import warnings
warnings.filterwarnings("ignore")

data_dir = params.data_dir
results_dir = params.results_dir
fig_dir = params.fig_dir

sub_info = params.sub_info
task_info = params.task_info
thresh = params.thresh

suf = params.suf
rois = params.rois
hemis = params.hemis
import sys
import os
import numpy as np
import pandas as pd
from nilearn import image, datasets
import ptoc_params as params

# Load parameters
data_dir = params.data_dir
results_dir = params.results_dir
sub_info = params.sub_info
task_info = params.task_info
thresh = params.thresh
suf = params.suf
rois = params.rois
hemis = params.hemis
roi_dir = '/user_data/csimmon2/git_repos/ptoc/roiParcels'

def create_sub_map():
    print('Creating individual subject maps...')
    
    for task, cond, cope in zip(task_info['task'], task_info['cond'], task_info['cope']):
        if cond == 'object':
            roi_types = ['ventral_visual_cortex', 'dorsal_visual_cortex']
        elif cond == 'scramble':
            roi_types = ['V1']
        
        for roi_type in roi_types:
            # Load and binarize ROI
            roi_path = os.path.join(roi_dir, f'{roi_type}.nii.gz')
            roi = image.load_img(roi_path)
            roi = image.math_img('img1 > 0', img1=roi)
            print(f'Processing {cond}, {roi_type}')
            print(f'ROI shape: {roi.shape}, Affine: {roi.affine}')
            
            for sub in sub_info['sub']:
                sub_dir = os.path.join(data_dir, sub, 'ses-01')
                
                # Check if zstat exists
                zstat_path = os.path.join(sub_dir, f'derivatives/fsl/{task}/HighLevel{suf}.gfeat/cope{cope}.feat/stats/zstat1_reg.nii.gz')
                
                if os.path.exists(zstat_path):
                    # Load zstat
                    zstat = image.load_img(zstat_path)
                    
                    # Threshold zstat
                    zstat = image.threshold_img(zstat, threshold=thresh, two_sided=False)
                    
                    from nilearn.image import resample_to_img

                    # Example code to resample roi to match zstat
                    roi_resampled = resample_to_img(roi, zstat)

                    
                    # Mask zstat with roi
                    zstat_masked = image.math_img('img1 * img2', img1=zstat, img2=roi_resampled)

                    
                    # Convert zstat to numpy array
                    func_np = zstat_masked.get_fdata()
                    
                    # Binarize func_np
                    binary_3dfunc = np.copy(func_np)
                    binary_3dfunc[func_np > 0] = 1
                    
                    # Binarize whole brain (for completeness)
                    whole_brain = np.copy(func_np)
                    whole_brain[whole_brain > 0] = 1
                    
                    # Average across voxels in z dimension (if necessary)
                    func_np = np.transpose(np.max(func_np, axis=2))
                    
                    # Create binary version of zstat (if needed)
                    binary_func = np.copy(func_np)
                    binary_func[func_np > 0] = 1
                    
                    # Save outputs
                    output_dir = os.path.join(sub_dir, 'derivatives/neural_map')
                    os.makedirs(output_dir, exist_ok=True)
                    
                    np.save(os.path.join(output_dir, f'{cond}_func.npy'), func_np)
                    np.save(os.path.join(output_dir, f'{cond}_binary.npy'), binary_func)
                    np.save(os.path.join(output_dir, f'{cond}_binary_3d.npy'), binary_3dfunc)
                    np.save(os.path.join(output_dir, f'{cond}_whole_brain.npy'), whole_brain)
                    
                else:
                    print(f'{cond} zstat does not exist for subject {sub}')
                
#create_sub_map()

def create_group_map():
    print('Creating individual subject maps...')


    # Extract control subs from sub_info
    control_subs = sub_info[sub_info['group'] == 'control']

    for task, cond, cope in zip(task_info['task'], task_info['cond'], task_info['cope']):
        if cond == 'object':
            roi_types = ['ventral_visual_cortex', 'dorsal_visual_cortex']
        elif cond == 'scramble':
            roi_types = ['V1']
        for roi_type in roi_types:
            
            print(f'Processing {cond} {task} {roi_type}')
            func_list = []
            binary_list = []
            
            for sub in control_subs['sub']:
                sub_dir = f'{data_dir}/{sub}/ses-01'
                
                # Check if neural map exists
                neural_map_path = f'{sub_dir}/derivatives/neural_map/{cond}_func.npy'
                
                if os.path.exists(neural_map_path):
                    # Load neural map
                    neural_map = np.load(neural_map_path)
                    
                    # Rescale all values as proportion of max to normalize across subject activation
                    neural_map = neural_map / np.max(neural_map)
                    
                    # Add neural map to list
                    func_list.append(neural_map)
                    
                    # Load binary map
                    binary_map_path = f'{sub_dir}/derivatives/neural_map/{cond}_binary.npy'
                    if os.path.exists(binary_map_path):
                        binary_map = np.load(binary_map_path)
                        
                        # Add binary map to list
                        binary_list.append(binary_map)
            
            if func_list and binary_list:
                # Average func maps across subjects
                func_group = np.nanmean(func_list, axis=0)
                
                # Sum binary maps
                binary_group = np.nansum(binary_list, axis=0)
                
                # Create output directory if it doesn't exist
                os.makedirs(f'{results_dir}/neural_map', exist_ok=True)
                
                # Save func group
                np.save(f'{results_dir}/neural_map/{cond}_func.npy', func_group)
                
                # Save binary group
                np.save(f'{results_dir}/neural_map/{cond}_binary.npy', binary_group)
            else:
                print(f'No valid neural maps found for condition {cond} and ROI {roi_type}.')
             
#create_sub_map()
create_group_map()