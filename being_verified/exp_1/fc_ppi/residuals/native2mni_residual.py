#!/usr/bin/env python3
"""
Transform partial correlation (residual) results from native space to MNI space
This script processes the pIPS_clean FC maps generated by fc_partial_correlation.py
"""

import subprocess
import os
import pandas as pd
import sys

# Import parameters
curr_dir = f'/user_data/csimmon2/git_repos/ptoc'
sys.path.insert(0, curr_dir)
import ptoc_params as params

# Load subject information
sub_info = pd.read_csv(f'{curr_dir}/sub_info.csv')
subjects = sub_info[sub_info['group'] == 'control']['sub'].tolist()

# Paths
raw_dir = params.raw_dir
residual_base_dir = '/user_data/csimmon2/ptoc_residuals'

# MNI template paths - use FSL standard (same as original analysis)
fsl_dir = os.environ.get('FSLDIR')
if not fsl_dir:
    print("Error: FSLDIR environment variable not set. Please load FSL module.")
    sys.exit(1)

mni_brain = os.path.join(fsl_dir, "data/standard/MNI152_T1_2mm_brain.nii.gz")
mni_template = os.path.join(fsl_dir, "data/standard/MNI152_T1_2mm.nii.gz")

# Check if FSL template exists
if not os.path.exists(mni_brain):
    print(f"Error: Cannot find FSL MNI template at {mni_brain}")
    print("Please ensure FSL is properly loaded (module load fsl)")
    sys.exit(1)
else:
    print(f"Using FSL MNI template: {mni_brain}")

def process_subject(sub):
    """Process a single subject's residual FC maps"""
    print(f"Processing subject: {sub}")
    
    # Input and output directories
    out_dir = f"{residual_base_dir}/{sub}/ses-01/derivatives"
    anat_brain = f"{raw_dir}/{sub}/ses-01/anat/{sub}_ses-01_T1w_brain.nii.gz"
    
    # Check if required files exist
    if not os.path.isfile(anat_brain):
        print(f"Error: anatomical brain file not found: {anat_brain}")
        return False
    
    # Create output directories
    os.makedirs(f"{out_dir}/fc_mni", exist_ok=True)
    
    # Generate transformation matrix if it doesn't exist
    anat2mni_mat = f"{out_dir}/anat2mni.mat"
    if not os.path.isfile(anat2mni_mat):
        print(f"Generating transformation matrix for {sub}")
        try:
            subprocess.run([
                'flirt',
                '-in', anat_brain,
                '-ref', mni_brain,
                '-omat', anat2mni_mat,
                '-bins', '256',
                '-cost', 'corratio',
                '-searchrx', '-90', '90',
                '-searchry', '-90', '90',
                '-searchrz', '-90', '90',
                '-dof', '12'
            ], check=True)
            print(f"Transformation matrix created: {anat2mni_mat}")
        except subprocess.CalledProcessError as e:
            print(f"Error creating transformation matrix for {sub}: {e}")
            return False
    else:
        print(f"Transformation matrix already exists: {anat2mni_mat}")

    # Process pIPS_clean FC maps for both hemispheres
    success = True
    for hemi in ['left', 'right']:
        # FC to MNI
        #fc_native = f"{out_dir}/fc/{sub}_pIPS_clean_{hemi}_loc_fc.nii.gz"
        #fc_mni = f"{out_dir}/fc_mni/{sub}_pIPS_clean_{hemi}_loc_fc_mni.nii.gz"
        
        fc_native = f"{out_dir}/fc/{sub}_LO_clean_{hemi}_loc_fc.nii.gz"
        fc_mni = f"{out_dir}/fc_mni/{sub}_LO_clean_{hemi}_loc_fc_mni.nii.gz"
        
        if os.path.isfile(fc_native) and not os.path.isfile(fc_mni):
            #print(f"Registering FC for {sub}, pIPS_clean, Hemisphere {hemi} to MNI space")
            print(f"Registering FC for {sub}, LO_clean, Hemisphere {hemi} to MNI space")
            try:
                subprocess.run([
                    'flirt',
                    '-in', fc_native,
                    '-ref', mni_brain,
                    '-out', fc_mni,
                    '-applyxfm',
                    '-init', anat2mni_mat,
                    '-interp', 'trilinear'
                ], check=True)
                print(f"Successfully registered: {fc_mni}")
            except subprocess.CalledProcessError as e:
                print(f"Error registering FC for {sub}, pIPS_clean, {hemi}: {e}")
                success = False
        elif os.path.isfile(fc_mni):
            print(f"FC MNI file already exists for {sub}, pIPS_clean, Hemisphere {hemi}")
        else:
            print(f"FC file not found for {sub}, pIPS_clean, Hemisphere {hemi}: {fc_native}")
            success = False

    return success

def main():
    """Main function to process all subjects or single subject from command line"""
    
    # Check for command line argument
    if len(sys.argv) > 1:
        # Process single subject
        subject = sys.argv[1]
        if subject not in subjects:
            print(f"Warning: {subject} not found in control subjects list")
        
        success = process_subject(subject)
        if success:
            print(f"Successfully processed {subject}")
        else:
            print(f"Failed to process {subject}")
            sys.exit(1)
    else:
        # Process all subjects
        print(f"Processing {len(subjects)} subjects...")
        failed_subjects = []
        
        for sub in subjects:
            success = process_subject(sub)
            if not success:
                failed_subjects.append(sub)
        
        # Summary
        print(f"\n{'='*50}")
        print(f"PROCESSING COMPLETE")
        print(f"{'='*50}")
        print(f"Total subjects: {len(subjects)}")
        print(f"Successfully processed: {len(subjects) - len(failed_subjects)}")
        if failed_subjects:
            print(f"Failed subjects: {failed_subjects}")
        else:
            print("All subjects processed successfully!")

if __name__ == "__main__":
    main()